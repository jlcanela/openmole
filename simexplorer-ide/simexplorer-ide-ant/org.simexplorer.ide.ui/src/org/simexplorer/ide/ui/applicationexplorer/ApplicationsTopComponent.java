/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.simexplorer.ide.ui.applicationexplorer;

import java.beans.PropertyVetoException;
import java.io.Serializable;
import java.util.logging.Logger;
import javax.swing.SwingUtilities;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.ExplorerUtils;
import org.openide.explorer.view.BeanTreeView;
import org.openide.nodes.Node;
import org.openide.util.Exceptions;
import org.openide.util.NbBundle;
import org.openide.util.lookup.ServiceProvider;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;
import org.simexplorer.ide.ui.dataexplorer.factors.FactorsExplorerTopComponent;
import org.simexplorer.ui.ide.structure.InputStructureTopComponent;
import org.simexplorer.ui.ide.structure.OutputStructureTopComponent;
import org.simexplorer.ide.ui.dataexplorer.variables.VariablesTopComponent;
import org.simexplorer.ide.ui.processoreditor.TaskEditorTopComponent;
import org.simexplorer.ui.ide.workflow.model.ApplicationsExplorerService;
import org.simexplorer.ui.ide.workflow.model.ExplorationApplication;
//import org.openide.util.Utilities;

/**
 * Top component which displays something.
 */
public final class ApplicationsTopComponent extends TopComponent implements ExplorerManager.Provider {

    private static ApplicationsTopComponent instance;
    /** path to the icon used by the component and its open action */
//    static final String ICON_PATH = "SET/PATH/TO/ICON/HERE";
    private static final String PREFERRED_ID = "ApplicationsTopComponent";
    private ExplorationApplication explorationApplication;
    private final ExplorerManager explorerManager = new ExplorerManager();

    private ApplicationsTopComponent() {
        initComponents();
        setName(NbBundle.getMessage(ApplicationsTopComponent.class, "CTL_ApplicationsTopComponent"));
        setToolTipText(NbBundle.getMessage(ApplicationsTopComponent.class, "HINT_ApplicationsTopComponent"));
        associateLookup(ExplorerUtils.createLookup(explorerManager, getActionMap()));
        ((BeanTreeView) jScrollPane1).setRootVisible(true);
//        setIcon(Utilities.loadImage(ICON_PATH, true));

    }

    public void setApplication(ExplorationApplication application) {
        this.explorationApplication = application;
        explorerManager.setRootContext(new ProcessorsListNode(application.getTreeRoot()));
        try {
            explorerManager.setSelectedNodes(new Node[]{explorerManager.getRootContext()});
        } catch (PropertyVetoException ex) {
            Exceptions.printStackTrace(ex);
        }
        // Force event to prevent bug #125
        TaskEditorTopComponent.findInstance().resultChanged(null);
        SwingUtilities.invokeLater(new Runnable() {

            @Override
            public void run() {
                FactorsExplorerTopComponent.findInstance().applicationUpdated();
                InputStructureTopComponent.findInstance().applicationUpdated();
                OutputStructureTopComponent.findInstance().applicationUpdated();
                VariablesTopComponent.findInstance().applicationUpdated();
                ((BeanTreeView) jScrollPane1).expandAll();
            }
        });
    }

    public ExplorationApplication getExplorationApplication() {
        return explorationApplication;
    }

    @Override
    public ExplorerManager getExplorerManager() {
        return explorerManager;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new BeanTreeView();

        setLayout(new java.awt.BorderLayout());
        add(jScrollPane1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

    /**
     * Gets default instance. Do not use directly: reserved for *.settings files only,
     * i.e. deserialization routines; otherwise you could get a non-deserialized instance.
     * To obtain the singleton instance, use {@link #findInstance}.
     */
    public static synchronized ApplicationsTopComponent getDefault() {
        if (instance == null) {
            instance = new ApplicationsTopComponent();
        }
        return instance;
    }

    /**
     * Obtain the ApplicationsTopComponent instance. Never call {@link #getDefault} directly!
     */
    public static synchronized ApplicationsTopComponent findInstance() {
        TopComponent win = WindowManager.getDefault().findTopComponent(PREFERRED_ID);
        if (win == null) {
            Logger.getLogger(ApplicationsTopComponent.class.getName()).warning(
                    "Cannot find " + PREFERRED_ID + " component. It will not be located properly in the window system.");
            return getDefault();
        }
        if (win instanceof ApplicationsTopComponent) {
            return (ApplicationsTopComponent) win;
        }
        Logger.getLogger(ApplicationsTopComponent.class.getName()).warning(
                "There seem to be multiple components with the '" + PREFERRED_ID + "' ID. That is a potential source of errors and unexpected behavior.");
        return getDefault();
    }

    @Override
    public int getPersistenceType() {
        return TopComponent.PERSISTENCE_ALWAYS;
    }

    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    /** replaces this in object stream */
    @Override
    public Object writeReplace() {
        return new ResolvableHelper();
    }

    @Override
    protected String preferredID() {
        return PREFERRED_ID;
    }

    final static class ResolvableHelper implements Serializable {

        private static final long serialVersionUID = 1L;

        public Object readResolve() {
            return ApplicationsTopComponent.getDefault();
        }
    }
}
