/*
 *  Copyright Â© 2008, Cemagref
 *
 *  This program is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Affero General Public License as
 *  published by the Free Software Foundation; either version 3 of
 *  the License, or (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public
 *  License along with this program; if not, write to the Free
 *  Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston,
 *  MA  02110-1301  USA
 */
package org.simexplorer.ide.ui.dataexplorer.variables;

import java.awt.event.ActionEvent;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import javax.swing.Action;
import org.simexplorer.ide.ui.applicationexplorer.ApplicationsTopComponent;
import java.io.Serializable;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.logging.Logger;
import javax.swing.AbstractAction;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.ExplorerUtils;
import org.openide.explorer.view.NodeTableModel;
import org.openide.explorer.view.TreeTableView;
import org.openide.nodes.Node;
import org.openide.nodes.Node.Property;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;
import org.openmole.core.model.data.IPrototype;

public final class VariablesTopComponent extends TopComponent implements ExplorerManager.Provider {

    private static VariablesTopComponent instance;
    /** path to the icon used by the component and its open action */
//    static final String ICON_PATH = "SET/PATH/TO/ICON/HERE";
    private static final String PREFERRED_ID = "VariablesTopComponent";
    private final ExplorerManager explorerManager = new ExplorerManager();
    private Collection<IPrototype> variables;
    private NodeTableModel nodeTableModel;

    private VariablesTopComponent() {
        nodeTableModel = new NodeTableModel();

        nodeTableModel.setProperties(new Node.Property[]{new VariableNode.TypeProperty()});
        initComponents();
        ((TreeTableView) jScrollPane1).setRootVisible(false);
        associateLookup(ExplorerUtils.createLookup(explorerManager, getActionMap()));
        setName(NbBundle.getMessage(VariablesTopComponent.class, "CTL_VariablesTopComponent"));
        setToolTipText(NbBundle.getMessage(VariablesTopComponent.class, "HINT_VariablesTopComponent"));
//        setIcon(Utilities.loadImage(ICON_PATH, true));
        ((TreeTableView) jScrollPane1).setProperties(new Property[]{new VariableNode.TypeProperty()});

        
       // ((TreeTableView) jScrollPane1).addMouseListener(new MyMouseListener());
        this.addMouseListener(new MyMouseListener());
        this.removeMouseListener(this.getMouseListeners()[0]);
        ((TreeTableView) jScrollPane1).removeMouseListener(((TreeTableView) jScrollPane1).getMouseListeners()[0]);
    }

    public void addOrSet(IPrototype var) {
        ApplicationsTopComponent.findInstance().getExplorationApplication().putContract(var);
        this.applicationUpdated();
    }

    // TODO maybe use the lookup
    public void applicationUpdated() {
        variables = ApplicationsTopComponent.findInstance().getExplorationApplication().getVariablesContracts();
        if (variables != null) {
            VariablesNode node = new VariablesNode(variables);
            explorerManager.setRootContext(node);
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new TreeTableView(nodeTableModel);

        setLayout(new java.awt.BorderLayout());

        jScrollPane1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                mymouseHandler(evt);
            }
        });
        add(jScrollPane1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void mymouseHandler(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mymouseHandler
        // TODO add your handling code here:
    }//GEN-LAST:event_mymouseHandler

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

    /**
     * Gets default instance. Do not use directly: reserved for *.settings files only,
     * i.e. deserialization routines; otherwise you could get a non-deserialized instance.
     * To obtain the singleton instance, use {@link findInstance}.
     */
    public static synchronized VariablesTopComponent getDefault() {
        if (instance == null) {
            instance = new VariablesTopComponent();
        }
        return instance;
    }

    /**
     * Obtain the VariablesTopComponent instance. Never call {@link #getDefault} directly!
     */
    public static synchronized VariablesTopComponent findInstance() {
        TopComponent win = WindowManager.getDefault().findTopComponent(PREFERRED_ID);
        if (win == null) {
            Logger.getLogger(VariablesTopComponent.class.getName()).warning(
                    "Cannot find " + PREFERRED_ID +
                    " component. It will not be located properly in the window system.");
            return getDefault();
        }
        if (win instanceof VariablesTopComponent) {
            return (VariablesTopComponent) win;
        }
        Logger.getLogger(VariablesTopComponent.class.getName()).warning(
                "There seem to be multiple components with the '" + PREFERRED_ID +
                "' ID. That is a potential source of errors and unexpected behavior.");
        return getDefault();
    }

    @Override
    public int getPersistenceType() {
        return TopComponent.PERSISTENCE_ALWAYS;
    }

    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    /** replaces this in object stream */
    @Override
    public Object writeReplace() {
        return new ResolvableHelper();
    }

    @Override
    protected String preferredID() {
        return PREFERRED_ID;
    }

    final static class ResolvableHelper implements Serializable {

        private static final long serialVersionUID = 1L;

        public Object readResolve() {
            return VariablesTopComponent.getDefault();
        }
    }

    @Override
    public Action[] getActions() {
        List<Action> actions = Arrays.asList(super.getActions());
        actions.add(new EditAction());
        return actions.toArray(new Action[0]);
    }

    @Override
    public ExplorerManager getExplorerManager() {
        return explorerManager;
    }




    private class EditAction extends AbstractAction {

        private EditVariableAction action;

        public EditAction() {
            putValue(NAME, NbBundle.getMessage(EditVariableAction.class, "CTL_EditVariableAction"));
            action = new EditVariableAction();
        // TODO this should be the best way, but doesn't work
        //wizardAction = (EditVariableAction) Lookups.forPath("Actions/Exploration").lookup(EditVariableAction.class);
        }

        @Override
        public void actionPerformed(ActionEvent e) {
            action.performAction(null);
        }
    }

    private class MyMouseListener implements MouseListener{
    public void mousePressed(MouseEvent e) {
    }

    public void mouseReleased(MouseEvent e) {
    }

    public void mouseEntered(MouseEvent e) {
    }

    public void mouseExited(MouseEvent e) {
    }

    public void mouseClicked(MouseEvent e) {
    }

    }
}

