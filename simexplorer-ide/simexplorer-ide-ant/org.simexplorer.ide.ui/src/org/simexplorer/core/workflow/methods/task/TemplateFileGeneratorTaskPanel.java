/*
 *
 *  Copyright (c) 2007, 2009, Cemagref
 *
 *  This program is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU General Public License as
 *  published by the Free Software Foundation; either version 3 of
 *  the License, or (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public
 *  License along with this program; if not, write to the Free
 *  Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston,
 *  MA  02110-1301  USA
 */
package org.simexplorer.core.workflow.methods.task;

import au.com.bytecode.opencsv.CSVReader;
import au.com.bytecode.opencsv.CSVWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFileChooser;
import javax.swing.table.DefaultTableModel;
import org.openide.util.Exceptions;
import org.openide.util.lookup.ServiceProvider;
import org.openmole.core.structuregenerator.ComplexNode;
import org.openmole.core.structuregenerator.PrototypeNode;
import org.openmole.core.implementation.data.Prototype;
import org.openmole.plugin.task.filemanagement.TemplateFileGeneratorFromLocalFileTask;
import org.simexplorer.ide.ui.applicationexplorer.ApplicationsTopComponent;
import org.simexplorer.ui.ide.structure.InputStructureTopComponent;
import org.simexplorer.ui.tools.ActionsUtils;
import org.simexplorer.core.workflow.methods.EditorPanel;

@ServiceProvider(service=EditorPanel.class)
public class TemplateFileGeneratorTaskPanel extends EditorPanel<TemplateFileGeneratorFromLocalFileTask> {

    //TODO: show the variable in wich will be stored the generated file

    private File csvFileToImport = null;
    private DefaultTableModel tableModel;
    private char[] fieldSeparatorsChar = new char[]{'\t', ';', ','};
    private static final String FIELD_SEPARATOR_OTHER = "Other";
    private char fieldSeparatorCharSelected;
    private String[] fieldSeparatorsName = new String[]{"Tabulation", "Semicolon", "Comma", FIELD_SEPARATOR_OTHER};

    public TemplateFileGeneratorTaskPanel() {
        super(TemplateFileGeneratorFromLocalFileTask.class);
        initComponents();
        tableModel = (DefaultTableModel) jTable1.getModel();
        fieldSeparatorComboBox.setSelectedIndex(-1);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        variableSelectDialog = new javax.swing.JDialog();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        csvImporterDialog = new javax.swing.JDialog();
        fieldSeparatorTextField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        csvImporterOkButton = new javax.swing.JButton();
        csvImporterCancelButton = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        csvImporterTemplateFilenameTextField = new javax.swing.JTextField();
        jButton7 = new javax.swing.JButton();
        fieldSeparatorComboBox = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        templateFileTextField = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();

        jList1.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(jList1);

        jButton2.setText("Cancel");

        jButton3.setText("Ok");

        javax.swing.GroupLayout variableSelectDialogLayout = new javax.swing.GroupLayout(variableSelectDialog.getContentPane());
        variableSelectDialog.getContentPane().setLayout(variableSelectDialogLayout);
        variableSelectDialogLayout.setHorizontalGroup(
            variableSelectDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(variableSelectDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(variableSelectDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, variableSelectDialogLayout.createSequentialGroup()
                        .addComponent(jButton3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton2))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 163, Short.MAX_VALUE))
                .addContainerGap())
        );
        variableSelectDialogLayout.setVerticalGroup(
            variableSelectDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, variableSelectDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 123, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(variableSelectDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jButton3))
                .addContainerGap())
        );

        csvImporterDialog.setTitle("Import from a CSV file");
        csvImporterDialog.setModal(true);

        fieldSeparatorTextField.setEnabled(false);
        fieldSeparatorTextField.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                fieldSeparatorModified(evt);
            }
        });

        jLabel3.setText("Field separator:");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Type", "Initial value", "Import"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(jTable1);

        csvImporterOkButton.setText("Ok");
        csvImporterOkButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                csvImporterOkButtonActionPerformed(evt);
            }
        });

        csvImporterCancelButton.setText("Cancel");
        csvImporterCancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                csvImporterCancelButtonActionPerformed(evt);
            }
        });

        jLabel4.setText("Template file to generate:");

        jButton7.setText("Chooseâ€¦");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        fieldSeparatorComboBox.setModel(new DefaultComboBoxModel(fieldSeparatorsName));
        fieldSeparatorComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fieldSeparatorComboBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout csvImporterDialogLayout = new javax.swing.GroupLayout(csvImporterDialog.getContentPane());
        csvImporterDialog.getContentPane().setLayout(csvImporterDialogLayout);
        csvImporterDialogLayout.setHorizontalGroup(
            csvImporterDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(csvImporterDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(csvImporterDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(csvImporterDialogLayout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 437, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(csvImporterDialogLayout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(fieldSeparatorComboBox, 0, 131, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(fieldSeparatorTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(146, 146, 146))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, csvImporterDialogLayout.createSequentialGroup()
                        .addComponent(csvImporterOkButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(csvImporterCancelButton)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, csvImporterDialogLayout.createSequentialGroup()
                        .addComponent(csvImporterTemplateFilenameTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 332, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton7)
                        .addContainerGap())
                    .addGroup(csvImporterDialogLayout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addContainerGap(289, Short.MAX_VALUE))))
        );
        csvImporterDialogLayout.setVerticalGroup(
            csvImporterDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(csvImporterDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(csvImporterDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(fieldSeparatorTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fieldSeparatorComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 194, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(csvImporterDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(csvImporterTemplateFilenameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton7))
                .addGap(12, 12, 12)
                .addGroup(csvImporterDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(csvImporterCancelButton)
                    .addComponent(csvImporterOkButton))
                .addContainerGap())
        );

        jLabel1.setText("Template file:");

        templateFileTextField.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                templateFileUpdate(evt);
            }
        });

        jButton1.setText("Browseâ€¦");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton8.setText("Build a template file from a CSV fileâ€¦");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buildTplFromCSV(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(templateFileTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 336, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1))
                    .addComponent(jButton8))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(templateFileTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void templateFileUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_templateFileUpdate
        // FIXME
        //getObjectEdited().addTheTemplateFile(templateFileTextField.getText());
        throw new UnsupportedOperationException();
    }//GEN-LAST:event_templateFileUpdate

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        String path = templateFileTextField.getText();
        JFileChooser fc = ActionsUtils.getJFileChooser("Browse", new File(path));
        if (fc.showSaveDialog(null) == JFileChooser.APPROVE_OPTION) {
            //templateFileTextField.setText(fc.getSelectedFile().toURI().toString());
            templateFileTextField.setText(fc.getSelectedFile().getAbsolutePath());
            // FIXME
            //getObjectEdited().addTheTemplateFile(fc.getSelectedFile().getAbsolutePath());
            throw new UnsupportedOperationException();
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void clearDataTable() {
        for (int i = 0; i < jTable1.getRowCount(); i++) {
            tableModel.removeRow(i);
        }
    }

    private void csvImporterCancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_csvImporterCancelButtonActionPerformed
        csvImporterDialog.dispose();
        clearDataTable();
}//GEN-LAST:event_csvImporterCancelButtonActionPerformed

    private void fieldSeparatorModified(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_fieldSeparatorModified
        clearDataTable();
        if (fieldSeparatorTextField.getText().length() > 0) {
            setFieldSeparator(fieldSeparatorTextField.getText().toCharArray()[0]);
        }
    }//GEN-LAST:event_fieldSeparatorModified

    private void setFieldSeparator(char c) {
        fieldSeparatorCharSelected = c;
        clearDataTable();
        try {
            CSVReader csvReader = new CSVReader(new FileReader(csvFileToImport), c);
            String[] headers = csvReader.readNext();
            String[] values = csvReader.readNext();
            // insert each variables in the table
            Class type;
            for (int idx = 0; idx < headers.length; idx++) {
                if (idx < values.length) {
                    if (values[idx].matches("^\\d+$")) {
                        type = Integer.class;
                    } else if (values[idx].matches("^(\\d|\\.)*$")) {
                        type = Double.class;
                    } else {
                        type = String.class;
                    }
                    tableModel.addRow(new Object[]{headers[idx], type, values[idx], true});
                }
            }
        } catch (IOException ex) {
            Exceptions.printStackTrace(ex);
        }
    }
    private void buildTplFromCSV(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buildTplFromCSV
        JFileChooser fc = ActionsUtils.getJFileChooser("Browse", null);
        if (fc.showSaveDialog(null) == JFileChooser.APPROVE_OPTION) {
            csvFileToImport = fc.getSelectedFile();
            clearDataTable();
            csvImporterDialog.pack();
            csvImporterDialog.setVisible(true);
        }
}//GEN-LAST:event_buildTplFromCSV

    private void fieldSeparatorComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fieldSeparatorComboBoxActionPerformed
        if (fieldSeparatorComboBox.getSelectedItem() == FIELD_SEPARATOR_OTHER) {
            fieldSeparatorTextField.setEnabled(true);
            fieldSeparatorModified(null);
        } else if (fieldSeparatorComboBox.getSelectedIndex() > -1) {
            fieldSeparatorTextField.setEnabled(false);
            setFieldSeparator(fieldSeparatorsChar[fieldSeparatorComboBox.getSelectedIndex()]);
        }
    }//GEN-LAST:event_fieldSeparatorComboBoxActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        JFileChooser fc = ActionsUtils.getJFileChooser("Browse", new File(csvImporterTemplateFilenameTextField.getText()));
        if (fc.showSaveDialog(null) == JFileChooser.APPROVE_OPTION) {
            csvImporterTemplateFilenameTextField.setText(fc.getSelectedFile().getAbsolutePath());
        }
    }//GEN-LAST:event_jButton7ActionPerformed

    private boolean isVariableToImport(int row) {
        return (Boolean) tableModel.getValueAt(row, 3);
    }

    private void csvImporterOkButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_csvImporterOkButtonActionPerformed
        // import structure elements
        ComplexNode inputStructure = ApplicationsTopComponent.findInstance().getExplorationApplication().getInputStructure();
        for (int i = 0; i < tableModel.getRowCount(); i++) {
            if (isVariableToImport(i)) {
                String name = (String) tableModel.getValueAt(i, 0);
                // TODO fix that?
                //name = VerifyName.removeIncorrectChars(name);
                Prototype prototype = new Prototype(name, (Class) tableModel.getValueAt(i, 1));
                inputStructure.add(new PrototypeNode(prototype));
            }
        }
        InputStructureTopComponent.findInstance().applicationUpdated();
        // generate template file
        try {
            CSVWriter writer = new CSVWriter(new FileWriter(csvImporterTemplateFilenameTextField.getText()), fieldSeparatorCharSelected, CSVWriter.NO_QUOTE_CHARACTER);
            // write variables names
            String[] vars = new String[tableModel.getRowCount()];
            for (int i = 0; i < tableModel.getRowCount(); i++) {
                vars[i] = (String) tableModel.getValueAt(i, 0);
            }
            writer.writeNext(vars);
            // write variables values or patterns
            for (int i = 0; i < tableModel.getRowCount(); i++) {
                if (isVariableToImport(i)) {
                    // TODO fix that?
                    vars[i] = "${input." + /*VerifyName.removeIncorrectChars((String)*/ tableModel.getValueAt(i, 0)/*)*/ + "}";
                } else {
                    vars[i] = (String) tableModel.getValueAt(i, 2);
                }
            }
            writer.writeNext(vars);
            writer.close();
        } catch (IOException ex) {
            Exceptions.printStackTrace(ex);
        }
        // set template file path
        templateFileTextField.setText(csvImporterTemplateFilenameTextField.getText());
        csvImporterDialog.dispose();
}//GEN-LAST:event_csvImporterOkButtonActionPerformed

    @Override
    public void setObjectEdited(TemplateFileGeneratorFromLocalFileTask method) {
        super.setObjectEdited(method);
        // FIXME getter is missing in API
        /*if (method.getTemplateFile(null) != null) {
            templateFileTextField.setText(method.getTemplateFile(null).getPath());
        }*/
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton csvImporterCancelButton;
    private javax.swing.JDialog csvImporterDialog;
    private javax.swing.JButton csvImporterOkButton;
    private javax.swing.JTextField csvImporterTemplateFilenameTextField;
    private javax.swing.JComboBox fieldSeparatorComboBox;
    private javax.swing.JTextField fieldSeparatorTextField;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JList jList1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField templateFileTextField;
    private javax.swing.JDialog variableSelectDialog;
    // End of variables declaration//GEN-END:variables
}
